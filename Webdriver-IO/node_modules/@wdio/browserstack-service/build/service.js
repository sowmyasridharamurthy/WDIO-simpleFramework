"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _got = _interopRequireDefault(require("got"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('@wdio/browserstack-service');

class BrowserstackService {
  constructor(options = {}, caps, config) {
    this.config = config;
    this.sessionBaseUrl = 'https://api.browserstack.com/automate/sessions';
    this.failReasons = [];
    this.scenariosThatRan = [];
    this.preferScenarioName = Boolean(options.preferScenarioName);
    this.strict = Boolean(config.cucumberOpts && config.cucumberOpts.strict);
    this.failureStatuses = ['failed', 'ambiguous', 'undefined', 'unknown'];
    this.strict && this.failureStatuses.push('pending');
  }

  beforeSession(config) {
    if (!config.user) {
      config.user = 'NotSetUser';
    }

    if (!config.key) {
      config.key = 'NotSetKey';
    }

    this.config.user = config.user;
    this.config.key = config.key;
  }

  before() {
    this.sessionId = global.browser.sessionId;

    if (global.browser.capabilities.app) {
      this.sessionBaseUrl = 'https://api-cloud.browserstack.com/app-automate/sessions';
    }

    this.scenariosThatRan = [];
    return this._printSessionURL();
  }

  beforeSuite(suite) {
    this.fullTitle = suite.title;

    this._update(this.sessionId, {
      name: this.fullTitle
    });
  }

  beforeFeature(uri, feature) {
    this.fullTitle = feature.document.feature.name;

    this._update(this.sessionId, {
      name: this.fullTitle
    });
  }

  afterTest(test, context, results) {
    const {
      error,
      passed
    } = results;
    this.fullTitle = test.fullName || `${test.parent} - ${test.title}`;

    if (!passed) {
      this.failReasons.push(error && error.message || 'Unknown Error');
    }
  }

  after(result) {
    if (this.preferScenarioName && this.scenariosThatRan.length === 1) {
      this.fullTitle = this.scenariosThatRan.pop();
    }

    const hasReasons = Boolean(this.failReasons.filter(Boolean).length);
    return this._update(this.sessionId, {
      status: result === 0 ? 'passed' : 'failed',
      name: this.fullTitle,
      reason: hasReasons ? this.failReasons.join('\n') : undefined
    });
  }

  afterScenario(uri, feature, pickle, results) {
    let {
      exception,
      status
    } = results;

    if (status !== 'skipped') {
      this.scenariosThatRan.push(pickle.name);
    }

    if (this.failureStatuses.includes(status)) {
      exception = exception || (status === 'pending' ? `Some steps/hooks are pending for scenario "${pickle.name}"` : 'Unknown Error');
      this.failReasons.push(exception);
    }
  }

  async onReload(oldSessionId, newSessionId) {
    const hasReasons = Boolean(this.failReasons.filter(Boolean).length);
    this.sessionId = newSessionId;
    await this._update(oldSessionId, {
      name: this.fullTitle,
      status: hasReasons ? 'failed' : 'passed',
      reason: hasReasons ? this.failReasons.join('\n') : undefined
    });
    this.scenariosThatRan = [];
    delete this.fullTitle;
    this.failReasons = [];
    await this._printSessionURL();
  }

  _update(sessionId, requestBody) {
    return _got.default.put(`${this.sessionBaseUrl}/${sessionId}.json`, {
      json: requestBody,
      username: this.config.user,
      password: this.config.key
    });
  }

  async _printSessionURL() {
    const capabilities = global.browser.capabilities;
    const response = await (0, _got.default)(`${this.sessionBaseUrl}/${this.sessionId}.json`, {
      username: this.config.user,
      password: this.config.key,
      responseType: 'json'
    });

    const browserString = _constants.BROWSER_DESCRIPTION.map(k => capabilities[k]).filter(v => !!v).join(' ');

    log.info(`${browserString} session: ${response.body.automation_session.browser_url}`);
    return response.body;
  }

}

exports.default = BrowserstackService;